---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    io.kompose.service: mysql
  name: mysql
  namespace: {{ .Release.Namespace }}
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: mysql
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        io.kompose.network/hcf-default: "true"
        io.kompose.service: mysql
    spec:
      containers:
        - env:
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql
                  key: MYSQL_ROOT_PASSWORD
            - name: MYSQL_DATABASE
              value: mailtrain
            - name: MYSQL_USER
              value: mailtrain
            - name: MYSQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql
                  key: MYSQL_PASSWORD
          image: mysql:latest
          name: mysql
          ports:
            - containerPort: {{ .Values.storage.mysql.port }}
        #   resources:
        #     limits:
        #       cpu: "1"
        #       memory: "2Gi"
          volumeMounts:
            - mountPath: /var/lib/mysql
              name: mailtrain-mysql
          securityContext:
            runAsUser: 0
            runAsGroup: 0
      restartPolicy: Always
      volumes:
        - name: mailtrain-mysql
          persistentVolumeClaim:
            claimName: mailtrain-mysql
status: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    io.kompose.service: redis
  name: redis
  namespace: {{ .Release.Namespace }}
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: redis
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        io.kompose.network/hcf-default: "true"
        io.kompose.service: redis
    spec:
      containers:
        - image: redis:latest
          name: redis
          ports:
            - containerPort: {{ .Values.storage.kvdata.redisPort }}
        #   resources:
        #     limits:
        #       cpu: 1
        #       memory: "1Gi"
          volumeMounts:
            - mountPath: /data
              name: mailtrain-kvdata
      restartPolicy: Always
      volumes:
        - name: mailtrain-kvdata
          persistentVolumeClaim:
            claimName: mailtrain-kvdata
status: {}

---
{{ if .Values.phpmyadmin.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    io.kompose.service: phpmyadmin
  name: phpmyadmin
  namespace: {{ .Release.Namespace }}
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: phpmyadmin
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        io.kompose.network/hcf-default: "true"
        io.kompose.service: phpmyadmin
    spec:
      containers:
        - env:
            - name: PMA_HOST
              value: {{ .Values.app.MYSQL_HOST | quote }}
          image: phpmyadmin:latest
          name: phpmyadmin
          ports:
            - containerPort: {{ .Values.phpmyadmin.port }}
        #   resources:
        #     limits:
        #       cpu: "0.25"
        #       memory: "512M"
      restartPolicy: Always
status: {}
{{ end }}

---
{{- $storage := .Values.storage.kvdata.shareKvStorage | ternary  "mailtrain-kvdata" "mailtrain-mongo" -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: mongo
  name: mongo
  namespace: {{ .Release.Namespace }}
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: mongo
  strategy:
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      labels:
        io.kompose.network/hcf-default: "true"
        io.kompose.service: mongo
    spec:
      containers:
        - image: mongo:latest
          name: mongo
          ports:
            - containerPort: 27019
          resources:
            limits:
              cpu: 1
              memory: "1Gi"
          volumeMounts:
            - mountPath: /data
              name: {{ $storage }}
      restartPolicy: Always
      volumes:
        - name: {{ $storage }}
          persistentVolumeClaim:
            claimName: {{ $storage }}
status: {}
